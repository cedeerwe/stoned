{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Svg.svelte",
    "App.svelte"
  ],
  "sourcesContent": [
    "<svg version=\"1.1\" class=\"fa-icon {className}\"\n  class:fa-spin={spin} class:fa-pulse={pulse} class:fa-inverse={inverse}\n  class:fa-flip-horizontal=\"{flip === 'horizontal'}\" class:fa-flip-vertical=\"{flip === 'vertical'}\"\n  {x} {y} {width} {height}\n  aria-label={label}\n  role=\"{ label ? 'img' : 'presentation' }\"\n  viewBox={box} style={style}\n  >\n  <slot></slot>\n</svg>\n\n<style>\n.fa-icon {\n  display: inline-block;\n  fill: currentColor;\n}\n.fa-flip-horizontal {\n  transform: scale(-1, 1);\n}\n.fa-flip-vertical {\n  transform: scale(1, -1);\n}\n.fa-spin {\n  animation: fa-spin 1s 0s infinite linear;\n}\n.fa-inverse {\n  color: #fff;\n}\n.fa-pulse {\n  animation: fa-spin 1s infinite steps(8);\n}\n@keyframes fa-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n</style>\n\n<script>\n  let className;\n\n  export { className as class };\n\n  export let width;\n  export let height;\n  export let box;\n\n  export let spin = false;\n  export let inverse = false;\n  export let pulse = false;\n  export let flip = null;\n\n  // optionals\n  export let x = undefined;\n  export let y = undefined;\n  export let style = undefined;\n  export let label = undefined;\n</script>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport Icon from \"svelte-awesome\";\nimport { faHeart, faAngry, faBell, faClock, faHandPeace, faMoon, faArrowAltCircleLeft, faArrowAltCircleRight, } from \"@fortawesome/free-regular-svg-icons\";\nimport { faRedo } from \"@fortawesome/free-solid-svg-icons\";\nfunction sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\nvar CellType;\n(function (CellType) {\n    CellType[\"Heart\"] = \"Heart\";\n    CellType[\"Angry\"] = \"Angry\";\n    CellType[\"Bell\"] = \"Bell\";\n    CellType[\"Clock\"] = \"Clock\";\n    // HandPeace = \"HandPeace\",\n    // Moon = \"Moon\",\n})(CellType || (CellType = {}));\nfunction getIcon(cellType) {\n    switch (cellType) {\n        case CellType.Heart:\n            return faHeart;\n        case CellType.Angry:\n            return faAngry;\n        case CellType.Bell:\n            return faBell;\n        case CellType.Clock:\n            return faClock;\n        // case CellType.Moon:\n        //   return faMoon;\n        // case CellType.HandPeace:\n        //   return faHandPeace;\n    }\n}\nlet player = false;\nlet symbol = CellType.Heart;\nconst board_x = 4;\nconst board_y = 4;\nconst board = [...Array(board_y)].map(() => [...Array(board_x)].map(() => undefined));\nlet pastBoards = [copyBoard(board)];\nlet finished = false;\nlet round = 1;\nlet results = [];\nresetState();\nfunction resetState() {\n    return __awaiter(this, void 0, void 0, function* () {\n        for (let x = 0; x < board_x; x++) {\n            for (let y = 0; y < board_y; y++) {\n                board[x][y] = undefined;\n            }\n        }\n        round = 1;\n        symbol = CellType.Heart;\n        player = false;\n        finished = false;\n        results = [];\n        pastBoards = [copyBoard(board)];\n        const { x, y, sym } = optimalStep(board);\n        yield sleep(1000);\n        fillCell(x, y, sym);\n        pastBoards.push(copyBoard(board));\n        round += 1;\n    });\n}\nfunction playerMove(x, y, symbol) {\n    return () => __awaiter(this, void 0, void 0, function* () {\n        fillCell(x, y, symbol);\n        // if player actually made a move\n        if (!player) {\n            round += 1;\n            pastBoards.push(copyBoard(board));\n            if (round > board_x * board_y) {\n                finished = true;\n            }\n            else {\n                yield sleep(1000);\n                const { x, y, sym } = optimalStep(board);\n                fillCell(x, y, sym);\n                pastBoards.push(copyBoard(board));\n                round += 1;\n                if (round > board_x * board_y) {\n                    finished = true;\n                }\n            }\n        }\n    });\n}\nfunction fillCell(x, y, symbol) {\n    if (board[x][y] === undefined) {\n        board[x][y] = { type: symbol, player };\n        const result = {\n            player: computeScore(board, true),\n            opponent: computeScore(board, false),\n        };\n        results = [...results, result];\n        player = !player;\n    }\n}\nfunction setSymbol(cellType) {\n    return () => {\n        symbol = cellType;\n    };\n}\nfunction computeScore(board, player) {\n    let score = 0;\n    for (const [x, row] of board.entries()) {\n        for (const [y, cell] of row.entries()) {\n            if (cell !== undefined) {\n                if (cell.type === CellType.Heart && player === cell.player) {\n                    score += 6;\n                }\n                else if (cell.type === CellType.Clock && player === cell.player) {\n                    if (x === 0 ||\n                        x === board.length - 1 ||\n                        y === 0 ||\n                        y === row.length - 1) {\n                        score += 7;\n                    }\n                }\n                else if (cell.type === CellType.Angry && player !== cell.player) {\n                    for (const i of [-1, 0, 1]) {\n                        for (const j of [-1, 0, 1]) {\n                            const x2 = x + i;\n                            const y2 = y + j;\n                            if (x2 >= 0 && y2 >= 0 && x2 < board_x && y2 < board_y) {\n                                const cell2 = board[x2][y2];\n                                if (cell2 !== undefined && cell2.player === player) {\n                                    score -= 3;\n                                }\n                            }\n                        }\n                    }\n                }\n                else if (cell.type === CellType.Bell && player === cell.player) {\n                    for (const i of [-1, 1]) {\n                        for (const j of [-1, 1]) {\n                            const x2 = x + i;\n                            const y2 = y + j;\n                            if (x2 >= 0 && y2 >= 0 && x2 < board_x && y2 < board_y) {\n                                const cell2 = board[x2][y2];\n                                if (cell2 !== undefined &&\n                                    cell2.player === player &&\n                                    cell2.type === CellType.Bell) {\n                                    score += 5;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return score;\n}\nfunction availableSymbols() {\n    return [...Object.values(CellType)];\n}\nfunction copyBoard(board) {\n    return [...board].map((r) => [...r]);\n}\nfunction optimalStep(sharedBoard) {\n    const board = copyBoard(sharedBoard);\n    let optimalScore = -Infinity;\n    let optimalPlays = [];\n    const symbols = availableSymbols();\n    for (let x = 0; x < board.length; x++) {\n        for (let y = 0; y < board[x].length; y++) {\n            if (board[x][y] === undefined) {\n                for (const sym of symbols) {\n                    // try to add the symbol to the given place\n                    board[x][y] = { type: sym, player: false };\n                    const playerScore = computeScore(board, true);\n                    const opponentScore = computeScore(board, false);\n                    const score = opponentScore - playerScore;\n                    // compare optimality of score\n                    if (score > optimalScore) {\n                        optimalScore = score;\n                        optimalPlays = [{ x, y, sym }];\n                    }\n                    else if (score === optimalScore) {\n                        optimalPlays.push({ x, y, sym });\n                    }\n                    // remove the symbol\n                    board[x][y] = undefined;\n                }\n            }\n        }\n    }\n    if (optimalPlays.length === 0) {\n        throw new Error(\"no optimal plays\");\n    }\n    return optimalPlays[Math.floor(Math.random() * optimalPlays.length)];\n}\n</script>\n\n<style>\n  button {\n    width: 100%;\n    height: 100%;\n  }\n  .cell-full-opponent {\n    background-color: crimson;\n  }\n  .cell-full-opponent:active {\n    background-color: darkred;\n  }\n  .cell-full-player {\n    background-color: dodgerblue;\n  }\n  .cell-full-player:active {\n    background-color: royalblue;\n  }\n  .cell-empty {\n    background-color: white;\n  }\n  .table-holder {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-top: 20px;\n  }\n  .symbol-holder {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-top: 30px;\n  }\n  .results-holder {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-top: 30px;\n  }\n  .score-holder {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-top: 100px;\n  }\n  .symbol-button {\n    height: 50px;\n    width: 50px;\n    background-color: skyblue;\n  }\n  .symbol-button-active {\n    background-color: royalblue;\n  }\n  .history-button {\n    height: 50px;\n    width: 50px;\n    background-color: lightgreen;\n  }\n  .history-button:active {\n    background-color: green;\n  }\n  .player-board {\n    border: 1px;\n    border-collapse: collapse;\n  }\n  .board-row,\n  .board-cell {\n    padding: 0;\n    height: 50px;\n    width: 50px;\n  }\n  .score-opponent {\n    color: crimson;\n  }\n  .score-player {\n    color: dodgerblue;\n  }\n  .score {\n    font-size: 30px;\n  }\n</style>\n\n<div class=\"score-holder score\">\n  <span\n    class=\"score-player\">{results\n      .slice(0, round - 1)\n      .reduce((pv, cv) => pv + cv.player, 0)}</span>\n  :\n  <span\n    class=\"score-opponent\">{results\n      .slice(0, round - 1)\n      .reduce((pv, cv) => pv + cv.opponent, 0)}</span>\n</div>\n\n<div class=\"table-holder\">\n  <table class=\"player-board\">\n    {#each pastBoards[round - 1] as row, x}\n      <tr class=\"board-row\">\n        {#each row as el, y}\n          <td class=\"board-cell\">\n            <button\n              on:click={playerMove(x, y, symbol)}\n              class:cell-full-player={el !== undefined && el.player}\n              class:cell-full-opponent={el !== undefined && !el.player}\n              class:cell-empty={el === undefined}>\n              {#if el !== undefined}\n                <Icon data={getIcon(el.type)} scale=\"1.5\" />\n              {/if}</button>\n          </td>\n        {/each}\n      </tr>\n    {/each}\n  </table>\n</div>\n\n<div class=\"symbol-holder\">\n  {#if finished}\n    <button\n      class=\"history-button\"\n      disabled={round === 1}\n      on:click={() => (round = round - 1)}><Icon\n        data={faArrowAltCircleLeft}\n        scale=\"1.5\" /></button>\n    <button\n      class=\"history-button\"\n      disabled={round === pastBoards.length}\n      on:click={() => (round = round + 1)}><Icon\n        data={faArrowAltCircleRight}\n        scale=\"1.5\" /></button>\n    <button class=\"history-button\" on:click={resetState}><Icon\n        data={faRedo}\n        scale=\"1.5\" /></button>\n  {:else}\n    {#each Object.values(CellType) as sym}\n      <button\n        class=\"symbol-button\"\n        class:symbol-button-active={symbol === sym}\n        on:click={setSymbol(sym)}><Icon\n          data={getIcon(sym)}\n          scale=\"1.5\" /></button>\n    {/each}\n  {/if}\n</div>\n\n<div class=\"results-holder\">\n  <br />\n\n  <table>\n    <thead>\n      <tr>\n        <td>Round</td>\n        <td>Player</td>\n        <td>Opponent</td>\n      </tr>\n    </thead>\n    <tbody>\n      {#each results as result, i}\n        <tr>\n          <td>{i + 1}</td>\n          <td>{result.player}</td>\n          <td>{result.opponent}</td>\n        </tr>\n      {/each}\n    </tbody>\n  </table>\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}